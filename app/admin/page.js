'use client';

import { useState, useEffect } from 'react';
import { supabase } from '@/lib/supabaseClient'; // Import Supabase client

export default function AdminPage() {
  const [submissions, setSubmissions] = useState([]);
  const [search, setSearch] = useState('');
  const [filter, setFilter] = useState('');

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Supabase
  const fetchData = async () => {
    const { data, error } = await supabase
      .from('submissions')
      .select('*')
      .order('created_at', { ascending: false });

    if (error) {
      console.error('Error fetching data:', error);
    } else {
      setSubmissions(data);
    }
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  const handleApprove = async (id) => {
    await supabase
      .from('submissions')
      .update({ status: 'approved' })
      .eq('id', id);
    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠ Real-time ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏≠‡∏á
  };

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏•‡∏ö
  const handleRejectOrDelete = async (id, imageUrl) => {
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô database
    await supabase.from('submissions').delete().eq('id', id);

    // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô storage (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (imageUrl) {
      const fileName = imageUrl.split('/').pop();
      await supabase.storage.from('uploads').remove([fileName]);
    }
    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠ Real-time ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏≠‡∏á
  };

  // useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Real-time
  useEffect(() => {
    // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    fetchData();

    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á "‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á submissions
    const channel = supabase
      .channel('realtime submissions')
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: 'submissions' },
        (payload) => {
          console.log('Change received!', payload);
          fetchData(); // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        }
      )
      .subscribe();

    // 3. Cleanup: ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤
    return () => {
      supabase.removeChannel(channel);
    };
  }, []);

  const filteredPending = submissions.filter(x => 
    x.status === 'pending' &&
    (!filter || x.socialType === filter) && 
    (!search || [x.message, x.name, x.tableNumber].join(' ').toLowerCase().includes(search.toLowerCase()))
  );
  const filteredApproved = submissions.filter(x => 
    x.status === 'approved' &&
    (!filter || x.socialType === filter) && 
    (!search || [x.message, x.name, x.tableNumber].join(' ').toLowerCase().includes(search.toLowerCase()))
  );

  return (
    <div className="admin-container">
        <header className="admin-toolbar">
            <h1>THER Phuket ‚Ä¢ ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏£‡∏π‡∏õ</h1>
            <div className="controls">
                <input type="search" placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..." value={search} onChange={(e) => setSearch(e.target.value)} />
                <select value={filter} onChange={(e) => setFilter(e.target.value)}>
                    <option value="">‡∏ó‡∏∏‡∏Å‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•</option>
                    <option value="facebook">Facebook</option>
                    <option value="instagram">Instagram</option>
                    <option value="line">LINE</option>
                </select>
            </div>
        </header>

        <main className="admin-content">
            <div className="section">
                <h2>‚è≥ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ({filteredPending.length})</h2>
                <div className="grid-layout">
                {filteredPending.length > 0 ? (
                    filteredPending.map(item => (
                        <div key={item.id} className="admin-card">
                            <div className="img-box"><img loading="lazy" src={item.imageUrl} alt="Pending submission" /></div>
                            <div className="meta">
                                <p className="msg">"{item.message || '-'}"</p>
                                <span className="badge">‡πÇ‡∏ï‡πä‡∏∞: {item.tableNumber || '-'}</span>
                                <small>‡∏à‡∏≤‡∏Å: <strong>{item.name || '-'}</strong> ({item.socialType})</small>
                            </div>
                            <div className="actions-group">
                                <button className="btn-reject" onClick={() => handleRejectOrDelete(item.id, item.imageUrl)}>‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</button>
                                <button className="btn-approve" onClick={() => handleApprove(item.id)}>‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</button>
                            </div>
                        </div>
                    ))
                ) : ( <div className="empty-state">üéâ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</div> )}
                </div>
            </div>

            <div className="section">
                <h2>‚úÖ ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß ({filteredApproved.length})</h2>
                <div className="grid-layout">
                {filteredApproved.length > 0 ? (
                    filteredApproved.map(item => (
                        <div key={item.id} className="admin-card">
                            <div className="img-box"><img loading="lazy" src={item.imageUrl} alt="Approved submission" /></div>
                            <div className="meta">
                                <p className="msg">"{item.message || '-'}"</p>
                                <span className="badge">‡πÇ‡∏ï‡πä‡∏∞: {item.tableNumber || '-'}</span>
                                <small>‡∏à‡∏≤‡∏Å: <strong>{item.name || '-'}</strong> ({item.socialType})</small>
                            </div>
                            <div className="actions">
                                <button className="btn-delete" onClick={() => handleRejectOrDelete(item.id, item.imageUrl)}>‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£</button>
                            </div>
                        </div>
                    ))
                ) : ( <div className="empty-state">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡∏™‡πÑ‡∏•‡∏î‡πå</div> )}
                </div>
            </div>
        </main>
    </div>
  );
}